// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: bind.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Bind {

  /// <summary>Holder for reflection information generated from bind.proto</summary>
  public static partial class BindReflection {

    #region Descriptor
    /// <summary>File descriptor for bind.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BindReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgpiaW5kLnByb3RvEgRiaW5kIh4KC0JpbmRSZXF1ZXN0Eg8KB1N0ZWFtSWQY",
            "ASABKAkirQEKCUJpbmRSZXBseRINCgVWYWxpZBgBIAEoCBIOCgZCaW5kSWQY",
            "AiABKAkSLwoGUmVhc29uGAMgASgOMh8uYmluZC5CaW5kUmVwbHkuQmluZEVy",
            "cm9yUmVhc29uIlAKD0JpbmRFcnJvclJlYXNvbhIICgROb25lEAASCwoHVW5r",
            "bm93bhABEhIKDlN0ZWFtSWRJbnZhbGlkEAISEgoOU3RlYW1JZEJsb2NrZWQQ",
            "AyJ5ChJDb25maXJtQmluZFJlcXVlc3QSNgoLTWVzc2FnZVR5cGUYASABKA4y",
            "IS5iaW5kLkNvbmZpcm1CaW5kUmVxdWVzdC5CaW5kVHlwZSIrCghCaW5kVHlw",
            "ZRIPCgtBY2NvdW50QmluZBAAEg4KCkNsaWVudEJpbmQQASK/AQoQQ29uZmly",
            "bUJpbmRSZXBseRI0CgtNZXNzYWdlVHlwZRgBIAEoDjIfLmJpbmQuQ29uZmly",
            "bUJpbmRSZXBseS5CaW5kVHlwZRIPCgdJc1ZhbGlkGAIgASgIEhQKDEJpbmRD",
            "b21wbGV0ZRgDIAEoCBIUCgxDbGllbnRCaW5kSWQYBCABKAkSCwoDVFRMGAUg",
            "ASgFIisKCEJpbmRUeXBlEg8KC0FjY291bnRCaW5kEAASDgoKQ2xpZW50Qmlu",
            "ZBABIkAKF0NsaWVudEJpbmRWZXJpZnlSZXF1ZXN0EhQKDENsaWVudEJpbmRJ",
            "ZBgBIAEoCRIPCgdTdGVhbUlkGAIgASgJIiYKFUNsaWVudEJpbmRWZXJpZnlS",
            "ZXBseRINCgVWYWxpZBgBIAEoCDLLAQoMQ2xpZW50QmluZGVyEiwKBEJpbmQS",
            "ES5iaW5kLkJpbmRSZXF1ZXN0Gg8uYmluZC5CaW5kUmVwbHkiABJBCgtDb25m",
            "aXJtQmluZBIYLmJpbmQuQ29uZmlybUJpbmRSZXF1ZXN0GhYuYmluZC5Db25m",
            "aXJtQmluZFJlcGx5IgASSgoKQmluZFZlcmlmeRIdLmJpbmQuQ2xpZW50Qmlu",
            "ZFZlcmlmeVJlcXVlc3QaGy5iaW5kLkNsaWVudEJpbmRWZXJpZnlSZXBseSIA",
            "YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Bind.BindRequest), global::Bind.BindRequest.Parser, new[]{ "SteamId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bind.BindReply), global::Bind.BindReply.Parser, new[]{ "Valid", "BindId", "Reason" }, null, new[]{ typeof(global::Bind.BindReply.Types.BindErrorReason) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bind.ConfirmBindRequest), global::Bind.ConfirmBindRequest.Parser, new[]{ "MessageType" }, null, new[]{ typeof(global::Bind.ConfirmBindRequest.Types.BindType) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bind.ConfirmBindReply), global::Bind.ConfirmBindReply.Parser, new[]{ "MessageType", "IsValid", "BindComplete", "ClientBindId", "TTL" }, null, new[]{ typeof(global::Bind.ConfirmBindReply.Types.BindType) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bind.ClientBindVerifyRequest), global::Bind.ClientBindVerifyRequest.Parser, new[]{ "ClientBindId", "SteamId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bind.ClientBindVerifyReply), global::Bind.ClientBindVerifyReply.Parser, new[]{ "Valid" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class BindRequest : pb::IMessage<BindRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BindRequest> _parser = new pb::MessageParser<BindRequest>(() => new BindRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BindRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bind.BindReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BindRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BindRequest(BindRequest other) : this() {
      steamId_ = other.steamId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BindRequest Clone() {
      return new BindRequest(this);
    }

    /// <summary>Field number for the "SteamId" field.</summary>
    public const int SteamIdFieldNumber = 1;
    private string steamId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SteamId {
      get { return steamId_; }
      set {
        steamId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BindRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BindRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SteamId != other.SteamId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SteamId.Length != 0) hash ^= SteamId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (SteamId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SteamId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (SteamId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SteamId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SteamId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SteamId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BindRequest other) {
      if (other == null) {
        return;
      }
      if (other.SteamId.Length != 0) {
        SteamId = other.SteamId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SteamId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            SteamId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class BindReply : pb::IMessage<BindReply>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BindReply> _parser = new pb::MessageParser<BindReply>(() => new BindReply());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BindReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bind.BindReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BindReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BindReply(BindReply other) : this() {
      valid_ = other.valid_;
      bindId_ = other.bindId_;
      reason_ = other.reason_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BindReply Clone() {
      return new BindReply(this);
    }

    /// <summary>Field number for the "Valid" field.</summary>
    public const int ValidFieldNumber = 1;
    private bool valid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Valid {
      get { return valid_; }
      set {
        valid_ = value;
      }
    }

    /// <summary>Field number for the "BindId" field.</summary>
    public const int BindIdFieldNumber = 2;
    private string bindId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BindId {
      get { return bindId_; }
      set {
        bindId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Reason" field.</summary>
    public const int ReasonFieldNumber = 3;
    private global::Bind.BindReply.Types.BindErrorReason reason_ = global::Bind.BindReply.Types.BindErrorReason.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bind.BindReply.Types.BindErrorReason Reason {
      get { return reason_; }
      set {
        reason_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BindReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BindReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Valid != other.Valid) return false;
      if (BindId != other.BindId) return false;
      if (Reason != other.Reason) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Valid != false) hash ^= Valid.GetHashCode();
      if (BindId.Length != 0) hash ^= BindId.GetHashCode();
      if (Reason != global::Bind.BindReply.Types.BindErrorReason.None) hash ^= Reason.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Valid != false) {
        output.WriteRawTag(8);
        output.WriteBool(Valid);
      }
      if (BindId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(BindId);
      }
      if (Reason != global::Bind.BindReply.Types.BindErrorReason.None) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Reason);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Valid != false) {
        output.WriteRawTag(8);
        output.WriteBool(Valid);
      }
      if (BindId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(BindId);
      }
      if (Reason != global::Bind.BindReply.Types.BindErrorReason.None) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Reason);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Valid != false) {
        size += 1 + 1;
      }
      if (BindId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BindId);
      }
      if (Reason != global::Bind.BindReply.Types.BindErrorReason.None) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Reason);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BindReply other) {
      if (other == null) {
        return;
      }
      if (other.Valid != false) {
        Valid = other.Valid;
      }
      if (other.BindId.Length != 0) {
        BindId = other.BindId;
      }
      if (other.Reason != global::Bind.BindReply.Types.BindErrorReason.None) {
        Reason = other.Reason;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Valid = input.ReadBool();
            break;
          }
          case 18: {
            BindId = input.ReadString();
            break;
          }
          case 24: {
            Reason = (global::Bind.BindReply.Types.BindErrorReason) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Valid = input.ReadBool();
            break;
          }
          case 18: {
            BindId = input.ReadString();
            break;
          }
          case 24: {
            Reason = (global::Bind.BindReply.Types.BindErrorReason) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the BindReply message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum BindErrorReason {
        [pbr::OriginalName("None")] None = 0,
        [pbr::OriginalName("Unknown")] Unknown = 1,
        [pbr::OriginalName("SteamIdInvalid")] SteamIdInvalid = 2,
        [pbr::OriginalName("SteamIdBlocked")] SteamIdBlocked = 3,
      }

    }
    #endregion

  }

  /// <summary>
  /// This message is used for two purposes
  /// 1. Checking if a bind request is valid
  /// 2. Acknowledging a FinalBindId
  /// </summary>
  public sealed partial class ConfirmBindRequest : pb::IMessage<ConfirmBindRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ConfirmBindRequest> _parser = new pb::MessageParser<ConfirmBindRequest>(() => new ConfirmBindRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConfirmBindRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bind.BindReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfirmBindRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfirmBindRequest(ConfirmBindRequest other) : this() {
      messageType_ = other.messageType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfirmBindRequest Clone() {
      return new ConfirmBindRequest(this);
    }

    /// <summary>Field number for the "MessageType" field.</summary>
    public const int MessageTypeFieldNumber = 1;
    private global::Bind.ConfirmBindRequest.Types.BindType messageType_ = global::Bind.ConfirmBindRequest.Types.BindType.AccountBind;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bind.ConfirmBindRequest.Types.BindType MessageType {
      get { return messageType_; }
      set {
        messageType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConfirmBindRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConfirmBindRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MessageType != other.MessageType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MessageType != global::Bind.ConfirmBindRequest.Types.BindType.AccountBind) hash ^= MessageType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (MessageType != global::Bind.ConfirmBindRequest.Types.BindType.AccountBind) {
        output.WriteRawTag(8);
        output.WriteEnum((int) MessageType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (MessageType != global::Bind.ConfirmBindRequest.Types.BindType.AccountBind) {
        output.WriteRawTag(8);
        output.WriteEnum((int) MessageType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MessageType != global::Bind.ConfirmBindRequest.Types.BindType.AccountBind) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MessageType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConfirmBindRequest other) {
      if (other == null) {
        return;
      }
      if (other.MessageType != global::Bind.ConfirmBindRequest.Types.BindType.AccountBind) {
        MessageType = other.MessageType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MessageType = (global::Bind.ConfirmBindRequest.Types.BindType) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MessageType = (global::Bind.ConfirmBindRequest.Types.BindType) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the ConfirmBindRequest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum BindType {
        [pbr::OriginalName("AccountBind")] AccountBind = 0,
        [pbr::OriginalName("ClientBind")] ClientBind = 1,
      }

    }
    #endregion

  }

  /// <summary>
  /// This message is used for two purposes
  /// 1. Answering a bind request with status data.
  /// 2. Acknowledging a FinalBindId
  /// </summary>
  public sealed partial class ConfirmBindReply : pb::IMessage<ConfirmBindReply>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ConfirmBindReply> _parser = new pb::MessageParser<ConfirmBindReply>(() => new ConfirmBindReply());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConfirmBindReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bind.BindReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfirmBindReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfirmBindReply(ConfirmBindReply other) : this() {
      messageType_ = other.messageType_;
      isValid_ = other.isValid_;
      bindComplete_ = other.bindComplete_;
      clientBindId_ = other.clientBindId_;
      tTL_ = other.tTL_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfirmBindReply Clone() {
      return new ConfirmBindReply(this);
    }

    /// <summary>Field number for the "MessageType" field.</summary>
    public const int MessageTypeFieldNumber = 1;
    private global::Bind.ConfirmBindReply.Types.BindType messageType_ = global::Bind.ConfirmBindReply.Types.BindType.AccountBind;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bind.ConfirmBindReply.Types.BindType MessageType {
      get { return messageType_; }
      set {
        messageType_ = value;
      }
    }

    /// <summary>Field number for the "IsValid" field.</summary>
    public const int IsValidFieldNumber = 2;
    private bool isValid_;
    /// <summary>
    /// Lets them know if this Bind Id is still valid.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsValid {
      get { return isValid_; }
      set {
        isValid_ = value;
      }
    }

    /// <summary>Field number for the "BindComplete" field.</summary>
    public const int BindCompleteFieldNumber = 3;
    private bool bindComplete_;
    /// <summary>
    /// Has the Id been accepted?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BindComplete {
      get { return bindComplete_; }
      set {
        bindComplete_ = value;
      }
    }

    /// <summary>Field number for the "ClientBindId" field.</summary>
    public const int ClientBindIdFieldNumber = 4;
    private string clientBindId_ = "";
    /// <summary>
    /// If the user has confirmed the Id, this is set and is the permenant
    /// Id associated with that client.
    /// It must be stored by the client, it is required to authenticate later.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientBindId {
      get { return clientBindId_; }
      set {
        clientBindId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TTL" field.</summary>
    public const int TTLFieldNumber = 5;
    private int tTL_;
    /// <summary>
    /// Time left until this Bind Id is invalid.
    /// When this reaches 0, ValidBind becomes False. 
    /// Will never be less than 0.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TTL {
      get { return tTL_; }
      set {
        tTL_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConfirmBindReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConfirmBindReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MessageType != other.MessageType) return false;
      if (IsValid != other.IsValid) return false;
      if (BindComplete != other.BindComplete) return false;
      if (ClientBindId != other.ClientBindId) return false;
      if (TTL != other.TTL) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MessageType != global::Bind.ConfirmBindReply.Types.BindType.AccountBind) hash ^= MessageType.GetHashCode();
      if (IsValid != false) hash ^= IsValid.GetHashCode();
      if (BindComplete != false) hash ^= BindComplete.GetHashCode();
      if (ClientBindId.Length != 0) hash ^= ClientBindId.GetHashCode();
      if (TTL != 0) hash ^= TTL.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (MessageType != global::Bind.ConfirmBindReply.Types.BindType.AccountBind) {
        output.WriteRawTag(8);
        output.WriteEnum((int) MessageType);
      }
      if (IsValid != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsValid);
      }
      if (BindComplete != false) {
        output.WriteRawTag(24);
        output.WriteBool(BindComplete);
      }
      if (ClientBindId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ClientBindId);
      }
      if (TTL != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(TTL);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (MessageType != global::Bind.ConfirmBindReply.Types.BindType.AccountBind) {
        output.WriteRawTag(8);
        output.WriteEnum((int) MessageType);
      }
      if (IsValid != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsValid);
      }
      if (BindComplete != false) {
        output.WriteRawTag(24);
        output.WriteBool(BindComplete);
      }
      if (ClientBindId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ClientBindId);
      }
      if (TTL != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(TTL);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MessageType != global::Bind.ConfirmBindReply.Types.BindType.AccountBind) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MessageType);
      }
      if (IsValid != false) {
        size += 1 + 1;
      }
      if (BindComplete != false) {
        size += 1 + 1;
      }
      if (ClientBindId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientBindId);
      }
      if (TTL != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TTL);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConfirmBindReply other) {
      if (other == null) {
        return;
      }
      if (other.MessageType != global::Bind.ConfirmBindReply.Types.BindType.AccountBind) {
        MessageType = other.MessageType;
      }
      if (other.IsValid != false) {
        IsValid = other.IsValid;
      }
      if (other.BindComplete != false) {
        BindComplete = other.BindComplete;
      }
      if (other.ClientBindId.Length != 0) {
        ClientBindId = other.ClientBindId;
      }
      if (other.TTL != 0) {
        TTL = other.TTL;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MessageType = (global::Bind.ConfirmBindReply.Types.BindType) input.ReadEnum();
            break;
          }
          case 16: {
            IsValid = input.ReadBool();
            break;
          }
          case 24: {
            BindComplete = input.ReadBool();
            break;
          }
          case 34: {
            ClientBindId = input.ReadString();
            break;
          }
          case 40: {
            TTL = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MessageType = (global::Bind.ConfirmBindReply.Types.BindType) input.ReadEnum();
            break;
          }
          case 16: {
            IsValid = input.ReadBool();
            break;
          }
          case 24: {
            BindComplete = input.ReadBool();
            break;
          }
          case 34: {
            ClientBindId = input.ReadString();
            break;
          }
          case 40: {
            TTL = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the ConfirmBindReply message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum BindType {
        [pbr::OriginalName("AccountBind")] AccountBind = 0,
        [pbr::OriginalName("ClientBind")] ClientBind = 1,
      }

    }
    #endregion

  }

  public sealed partial class ClientBindVerifyRequest : pb::IMessage<ClientBindVerifyRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ClientBindVerifyRequest> _parser = new pb::MessageParser<ClientBindVerifyRequest>(() => new ClientBindVerifyRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClientBindVerifyRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bind.BindReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientBindVerifyRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientBindVerifyRequest(ClientBindVerifyRequest other) : this() {
      clientBindId_ = other.clientBindId_;
      steamId_ = other.steamId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientBindVerifyRequest Clone() {
      return new ClientBindVerifyRequest(this);
    }

    /// <summary>Field number for the "ClientBindId" field.</summary>
    public const int ClientBindIdFieldNumber = 1;
    private string clientBindId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientBindId {
      get { return clientBindId_; }
      set {
        clientBindId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SteamId" field.</summary>
    public const int SteamIdFieldNumber = 2;
    private string steamId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SteamId {
      get { return steamId_; }
      set {
        steamId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClientBindVerifyRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClientBindVerifyRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClientBindId != other.ClientBindId) return false;
      if (SteamId != other.SteamId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClientBindId.Length != 0) hash ^= ClientBindId.GetHashCode();
      if (SteamId.Length != 0) hash ^= SteamId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ClientBindId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClientBindId);
      }
      if (SteamId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SteamId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ClientBindId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClientBindId);
      }
      if (SteamId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SteamId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClientBindId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientBindId);
      }
      if (SteamId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SteamId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClientBindVerifyRequest other) {
      if (other == null) {
        return;
      }
      if (other.ClientBindId.Length != 0) {
        ClientBindId = other.ClientBindId;
      }
      if (other.SteamId.Length != 0) {
        SteamId = other.SteamId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClientBindId = input.ReadString();
            break;
          }
          case 18: {
            SteamId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ClientBindId = input.ReadString();
            break;
          }
          case 18: {
            SteamId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ClientBindVerifyReply : pb::IMessage<ClientBindVerifyReply>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ClientBindVerifyReply> _parser = new pb::MessageParser<ClientBindVerifyReply>(() => new ClientBindVerifyReply());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClientBindVerifyReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bind.BindReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientBindVerifyReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientBindVerifyReply(ClientBindVerifyReply other) : this() {
      valid_ = other.valid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientBindVerifyReply Clone() {
      return new ClientBindVerifyReply(this);
    }

    /// <summary>Field number for the "Valid" field.</summary>
    public const int ValidFieldNumber = 1;
    private bool valid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Valid {
      get { return valid_; }
      set {
        valid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClientBindVerifyReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClientBindVerifyReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Valid != other.Valid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Valid != false) hash ^= Valid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Valid != false) {
        output.WriteRawTag(8);
        output.WriteBool(Valid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Valid != false) {
        output.WriteRawTag(8);
        output.WriteBool(Valid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Valid != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClientBindVerifyReply other) {
      if (other == null) {
        return;
      }
      if (other.Valid != false) {
        Valid = other.Valid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Valid = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Valid = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
