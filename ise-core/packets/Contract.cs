// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: contract.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Contract {

  /// <summary>Holder for reflection information generated from contract.proto</summary>
  public static partial class ContractReflection {

    #region Descriptor
    /// <summary>File descriptor for contract.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ContractReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5jb250cmFjdC5wcm90bxIIY29udHJhY3QaDGNvbW1vbi5wcm90bxoOdHJh",
            "ZGFibGUucHJvdG8ihAEKEFByb3Bvc2VkQ29udHJhY3QSIQoFaXRlbXMYASAD",
            "KAsyEi50cmFkYWJsZS5UcmFkYWJsZRIRCgljYXNoVmFsdWUYAiABKAMSJgoI",
            "Q3VycmVuY3kYAyABKA4yFC5jb21tb24uQ3VycmVuY3lFbnVtEhIKCmNhc2hB",
            "bW91bnQYBCABKAUipgEKDkFjdGl2ZUNvbnRyYWN0EhIKCkNvbnRyYWN0SWQY",
            "ASABKAkSDwoHT3duZXJJZBgCIAEoCRIhCgVpdGVtcxgDIAMoCzISLnRyYWRh",
            "YmxlLlRyYWRhYmxlEiYKCEN1cnJlbmN5GAQgASgOMhQuY29tbW9uLkN1cnJl",
            "bmN5RW51bRISCgpjYXNoQW1vdW50GAUgASgFEhAKCGV4cGlyeVRTGAYgASgD",
            "Ij0KE0dldENvbnRyYWN0c1JlcXVlc3QSFAoMQ2xpZW50QmluZElkGAEgASgJ",
            "EhAKCENvbG9ueUlkGAIgASgJIkAKEUdldENvbnRyYWN0c1JlcGx5EisKCWNv",
            "bnRyYWN0cxgBIAMoCzIYLmNvbnRyYWN0LkFjdGl2ZUNvbnRyYWN0Im0KFUNy",
            "ZWF0ZUNvbnRyYWN0UmVxdWVzdBIUCgxDbGllbnRCaW5kSWQYASABKAkSEAoI",
            "Q29sb255SWQYAiABKAkSLAoIY29udHJhY3QYAyABKAsyGi5jb250cmFjdC5Q",
            "cm9wb3NlZENvbnRyYWN0IicKE0NyZWF0ZUNvbnRyYWN0UmVwbHkSEAoIYWNj",
            "ZXB0ZWQYASABKAgyswEKD0NvbnRyYWN0U2VydmljZRJMCgxHZXRDb250cmFj",
            "dHMSHS5jb250cmFjdC5HZXRDb250cmFjdHNSZXF1ZXN0GhsuY29udHJhY3Qu",
            "R2V0Q29udHJhY3RzUmVwbHkiABJSCg5DcmVhdGVDb250cmFjdBIfLmNvbnRy",
            "YWN0LkNyZWF0ZUNvbnRyYWN0UmVxdWVzdBodLmNvbnRyYWN0LkNyZWF0ZUNv",
            "bnRyYWN0UmVwbHkiAGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Common.CommonReflection.Descriptor, global::Tradable.TradableReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Contract.ProposedContract), global::Contract.ProposedContract.Parser, new[]{ "Items", "CashValue", "Currency", "CashAmount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Contract.ActiveContract), global::Contract.ActiveContract.Parser, new[]{ "ContractId", "OwnerId", "Items", "Currency", "CashAmount", "ExpiryTS" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Contract.GetContractsRequest), global::Contract.GetContractsRequest.Parser, new[]{ "ClientBindId", "ColonyId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Contract.GetContractsReply), global::Contract.GetContractsReply.Parser, new[]{ "Contracts" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Contract.CreateContractRequest), global::Contract.CreateContractRequest.Parser, new[]{ "ClientBindId", "ColonyId", "Contract" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Contract.CreateContractReply), global::Contract.CreateContractReply.Parser, new[]{ "Accepted" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ProposedContract : pb::IMessage<ProposedContract> {
    private static readonly pb::MessageParser<ProposedContract> _parser = new pb::MessageParser<ProposedContract>(() => new ProposedContract());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProposedContract> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Contract.ContractReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProposedContract() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProposedContract(ProposedContract other) : this() {
      items_ = other.items_.Clone();
      cashValue_ = other.cashValue_;
      currency_ = other.currency_;
      cashAmount_ = other.cashAmount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProposedContract Clone() {
      return new ProposedContract(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Tradable.Tradable> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::Tradable.Tradable.Parser);
    private readonly pbc::RepeatedField<global::Tradable.Tradable> items_ = new pbc::RepeatedField<global::Tradable.Tradable>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tradable.Tradable> Items {
      get { return items_; }
    }

    /// <summary>Field number for the "cashValue" field.</summary>
    public const int CashValueFieldNumber = 2;
    private long cashValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CashValue {
      get { return cashValue_; }
      set {
        cashValue_ = value;
      }
    }

    /// <summary>Field number for the "Currency" field.</summary>
    public const int CurrencyFieldNumber = 3;
    private global::Common.CurrencyEnum currency_ = global::Common.CurrencyEnum.Utc;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Common.CurrencyEnum Currency {
      get { return currency_; }
      set {
        currency_ = value;
      }
    }

    /// <summary>Field number for the "cashAmount" field.</summary>
    public const int CashAmountFieldNumber = 4;
    private int cashAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CashAmount {
      get { return cashAmount_; }
      set {
        cashAmount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProposedContract);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProposedContract other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      if (CashValue != other.CashValue) return false;
      if (Currency != other.Currency) return false;
      if (CashAmount != other.CashAmount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      if (CashValue != 0L) hash ^= CashValue.GetHashCode();
      if (Currency != global::Common.CurrencyEnum.Utc) hash ^= Currency.GetHashCode();
      if (CashAmount != 0) hash ^= CashAmount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
      if (CashValue != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(CashValue);
      }
      if (Currency != global::Common.CurrencyEnum.Utc) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Currency);
      }
      if (CashAmount != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CashAmount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      if (CashValue != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CashValue);
      }
      if (Currency != global::Common.CurrencyEnum.Utc) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Currency);
      }
      if (CashAmount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CashAmount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProposedContract other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
      if (other.CashValue != 0L) {
        CashValue = other.CashValue;
      }
      if (other.Currency != global::Common.CurrencyEnum.Utc) {
        Currency = other.Currency;
      }
      if (other.CashAmount != 0) {
        CashAmount = other.CashAmount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
          case 16: {
            CashValue = input.ReadInt64();
            break;
          }
          case 24: {
            Currency = (global::Common.CurrencyEnum) input.ReadEnum();
            break;
          }
          case 32: {
            CashAmount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ActiveContract : pb::IMessage<ActiveContract> {
    private static readonly pb::MessageParser<ActiveContract> _parser = new pb::MessageParser<ActiveContract>(() => new ActiveContract());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActiveContract> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Contract.ContractReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActiveContract() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActiveContract(ActiveContract other) : this() {
      contractId_ = other.contractId_;
      ownerId_ = other.ownerId_;
      items_ = other.items_.Clone();
      currency_ = other.currency_;
      cashAmount_ = other.cashAmount_;
      expiryTS_ = other.expiryTS_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActiveContract Clone() {
      return new ActiveContract(this);
    }

    /// <summary>Field number for the "ContractId" field.</summary>
    public const int ContractIdFieldNumber = 1;
    private string contractId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ContractId {
      get { return contractId_; }
      set {
        contractId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "OwnerId" field.</summary>
    public const int OwnerIdFieldNumber = 2;
    private string ownerId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OwnerId {
      get { return ownerId_; }
      set {
        ownerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Tradable.Tradable> _repeated_items_codec
        = pb::FieldCodec.ForMessage(26, global::Tradable.Tradable.Parser);
    private readonly pbc::RepeatedField<global::Tradable.Tradable> items_ = new pbc::RepeatedField<global::Tradable.Tradable>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tradable.Tradable> Items {
      get { return items_; }
    }

    /// <summary>Field number for the "Currency" field.</summary>
    public const int CurrencyFieldNumber = 4;
    private global::Common.CurrencyEnum currency_ = global::Common.CurrencyEnum.Utc;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Common.CurrencyEnum Currency {
      get { return currency_; }
      set {
        currency_ = value;
      }
    }

    /// <summary>Field number for the "cashAmount" field.</summary>
    public const int CashAmountFieldNumber = 5;
    private int cashAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CashAmount {
      get { return cashAmount_; }
      set {
        cashAmount_ = value;
      }
    }

    /// <summary>Field number for the "expiryTS" field.</summary>
    public const int ExpiryTSFieldNumber = 6;
    private long expiryTS_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ExpiryTS {
      get { return expiryTS_; }
      set {
        expiryTS_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActiveContract);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActiveContract other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ContractId != other.ContractId) return false;
      if (OwnerId != other.OwnerId) return false;
      if(!items_.Equals(other.items_)) return false;
      if (Currency != other.Currency) return false;
      if (CashAmount != other.CashAmount) return false;
      if (ExpiryTS != other.ExpiryTS) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ContractId.Length != 0) hash ^= ContractId.GetHashCode();
      if (OwnerId.Length != 0) hash ^= OwnerId.GetHashCode();
      hash ^= items_.GetHashCode();
      if (Currency != global::Common.CurrencyEnum.Utc) hash ^= Currency.GetHashCode();
      if (CashAmount != 0) hash ^= CashAmount.GetHashCode();
      if (ExpiryTS != 0L) hash ^= ExpiryTS.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ContractId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ContractId);
      }
      if (OwnerId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(OwnerId);
      }
      items_.WriteTo(output, _repeated_items_codec);
      if (Currency != global::Common.CurrencyEnum.Utc) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Currency);
      }
      if (CashAmount != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(CashAmount);
      }
      if (ExpiryTS != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(ExpiryTS);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ContractId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ContractId);
      }
      if (OwnerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OwnerId);
      }
      size += items_.CalculateSize(_repeated_items_codec);
      if (Currency != global::Common.CurrencyEnum.Utc) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Currency);
      }
      if (CashAmount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CashAmount);
      }
      if (ExpiryTS != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExpiryTS);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActiveContract other) {
      if (other == null) {
        return;
      }
      if (other.ContractId.Length != 0) {
        ContractId = other.ContractId;
      }
      if (other.OwnerId.Length != 0) {
        OwnerId = other.OwnerId;
      }
      items_.Add(other.items_);
      if (other.Currency != global::Common.CurrencyEnum.Utc) {
        Currency = other.Currency;
      }
      if (other.CashAmount != 0) {
        CashAmount = other.CashAmount;
      }
      if (other.ExpiryTS != 0L) {
        ExpiryTS = other.ExpiryTS;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ContractId = input.ReadString();
            break;
          }
          case 18: {
            OwnerId = input.ReadString();
            break;
          }
          case 26: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
          case 32: {
            Currency = (global::Common.CurrencyEnum) input.ReadEnum();
            break;
          }
          case 40: {
            CashAmount = input.ReadInt32();
            break;
          }
          case 48: {
            ExpiryTS = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetContractsRequest : pb::IMessage<GetContractsRequest> {
    private static readonly pb::MessageParser<GetContractsRequest> _parser = new pb::MessageParser<GetContractsRequest>(() => new GetContractsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetContractsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Contract.ContractReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetContractsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetContractsRequest(GetContractsRequest other) : this() {
      clientBindId_ = other.clientBindId_;
      colonyId_ = other.colonyId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetContractsRequest Clone() {
      return new GetContractsRequest(this);
    }

    /// <summary>Field number for the "ClientBindId" field.</summary>
    public const int ClientBindIdFieldNumber = 1;
    private string clientBindId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientBindId {
      get { return clientBindId_; }
      set {
        clientBindId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ColonyId" field.</summary>
    public const int ColonyIdFieldNumber = 2;
    private string colonyId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ColonyId {
      get { return colonyId_; }
      set {
        colonyId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetContractsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetContractsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClientBindId != other.ClientBindId) return false;
      if (ColonyId != other.ColonyId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClientBindId.Length != 0) hash ^= ClientBindId.GetHashCode();
      if (ColonyId.Length != 0) hash ^= ColonyId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClientBindId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClientBindId);
      }
      if (ColonyId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ColonyId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClientBindId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientBindId);
      }
      if (ColonyId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ColonyId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetContractsRequest other) {
      if (other == null) {
        return;
      }
      if (other.ClientBindId.Length != 0) {
        ClientBindId = other.ClientBindId;
      }
      if (other.ColonyId.Length != 0) {
        ColonyId = other.ColonyId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClientBindId = input.ReadString();
            break;
          }
          case 18: {
            ColonyId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetContractsReply : pb::IMessage<GetContractsReply> {
    private static readonly pb::MessageParser<GetContractsReply> _parser = new pb::MessageParser<GetContractsReply>(() => new GetContractsReply());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetContractsReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Contract.ContractReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetContractsReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetContractsReply(GetContractsReply other) : this() {
      contracts_ = other.contracts_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetContractsReply Clone() {
      return new GetContractsReply(this);
    }

    /// <summary>Field number for the "contracts" field.</summary>
    public const int ContractsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Contract.ActiveContract> _repeated_contracts_codec
        = pb::FieldCodec.ForMessage(10, global::Contract.ActiveContract.Parser);
    private readonly pbc::RepeatedField<global::Contract.ActiveContract> contracts_ = new pbc::RepeatedField<global::Contract.ActiveContract>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Contract.ActiveContract> Contracts {
      get { return contracts_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetContractsReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetContractsReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!contracts_.Equals(other.contracts_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= contracts_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      contracts_.WriteTo(output, _repeated_contracts_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += contracts_.CalculateSize(_repeated_contracts_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetContractsReply other) {
      if (other == null) {
        return;
      }
      contracts_.Add(other.contracts_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            contracts_.AddEntriesFrom(input, _repeated_contracts_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CreateContractRequest : pb::IMessage<CreateContractRequest> {
    private static readonly pb::MessageParser<CreateContractRequest> _parser = new pb::MessageParser<CreateContractRequest>(() => new CreateContractRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateContractRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Contract.ContractReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateContractRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateContractRequest(CreateContractRequest other) : this() {
      clientBindId_ = other.clientBindId_;
      colonyId_ = other.colonyId_;
      contract_ = other.contract_ != null ? other.contract_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateContractRequest Clone() {
      return new CreateContractRequest(this);
    }

    /// <summary>Field number for the "ClientBindId" field.</summary>
    public const int ClientBindIdFieldNumber = 1;
    private string clientBindId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientBindId {
      get { return clientBindId_; }
      set {
        clientBindId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ColonyId" field.</summary>
    public const int ColonyIdFieldNumber = 2;
    private string colonyId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ColonyId {
      get { return colonyId_; }
      set {
        colonyId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "contract" field.</summary>
    public const int ContractFieldNumber = 3;
    private global::Contract.ProposedContract contract_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Contract.ProposedContract Contract {
      get { return contract_; }
      set {
        contract_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateContractRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateContractRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClientBindId != other.ClientBindId) return false;
      if (ColonyId != other.ColonyId) return false;
      if (!object.Equals(Contract, other.Contract)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClientBindId.Length != 0) hash ^= ClientBindId.GetHashCode();
      if (ColonyId.Length != 0) hash ^= ColonyId.GetHashCode();
      if (contract_ != null) hash ^= Contract.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClientBindId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClientBindId);
      }
      if (ColonyId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ColonyId);
      }
      if (contract_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Contract);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClientBindId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientBindId);
      }
      if (ColonyId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ColonyId);
      }
      if (contract_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Contract);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateContractRequest other) {
      if (other == null) {
        return;
      }
      if (other.ClientBindId.Length != 0) {
        ClientBindId = other.ClientBindId;
      }
      if (other.ColonyId.Length != 0) {
        ColonyId = other.ColonyId;
      }
      if (other.contract_ != null) {
        if (contract_ == null) {
          Contract = new global::Contract.ProposedContract();
        }
        Contract.MergeFrom(other.Contract);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClientBindId = input.ReadString();
            break;
          }
          case 18: {
            ColonyId = input.ReadString();
            break;
          }
          case 26: {
            if (contract_ == null) {
              Contract = new global::Contract.ProposedContract();
            }
            input.ReadMessage(Contract);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CreateContractReply : pb::IMessage<CreateContractReply> {
    private static readonly pb::MessageParser<CreateContractReply> _parser = new pb::MessageParser<CreateContractReply>(() => new CreateContractReply());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateContractReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Contract.ContractReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateContractReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateContractReply(CreateContractReply other) : this() {
      accepted_ = other.accepted_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateContractReply Clone() {
      return new CreateContractReply(this);
    }

    /// <summary>Field number for the "accepted" field.</summary>
    public const int AcceptedFieldNumber = 1;
    private bool accepted_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Accepted {
      get { return accepted_; }
      set {
        accepted_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateContractReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateContractReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Accepted != other.Accepted) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Accepted != false) hash ^= Accepted.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Accepted != false) {
        output.WriteRawTag(8);
        output.WriteBool(Accepted);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Accepted != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateContractReply other) {
      if (other == null) {
        return;
      }
      if (other.Accepted != false) {
        Accepted = other.Accepted;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Accepted = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
