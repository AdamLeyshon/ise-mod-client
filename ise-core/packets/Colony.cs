// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: colony.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Colony {

  /// <summary>Holder for reflection information generated from colony.proto</summary>
  public static partial class ColonyReflection {

    #region Descriptor
    /// <summary>File descriptor for colony.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ColonyReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgxjb2xvbnkucHJvdG8SBmNvbG9ueSLEAQoKQ29sb255RGF0YRIQCghDb2xv",
            "bnlJZBgBIAEoCRIMCgROYW1lGAIgASgJEhMKC0ZhY3Rpb25OYW1lGAMgASgJ",
            "Eg0KBU1hcElkGAkgASgFEgwKBFRpY2sYBCABKAUSEwoLVXNlZERldk1vZGUY",
            "BSABKAgSEwoLR2FtZVZlcnNpb24YBiABKAkSJgoIUGxhdGZvcm0YByABKA4y",
            "FC5jb2xvbnkuUGxhdGZvcm1FbnVtEhIKCkNyZWF0ZURhdGUYCCABKAMiSQoT",
            "Q29sb255Q3JlYXRlUmVxdWVzdBIQCghDbGllbnRJZBgBIAEoCRIgCgRkYXRh",
            "GAIgASgLMhIuY29sb255LkNvbG9ueURhdGEiSQoTQ29sb255VXBkYXRlUmVx",
            "dWVzdBIQCghDbGllbnRJZBgBIAEoCRIgCgREYXRhGAIgASgLMhIuY29sb255",
            "LkNvbG9ueURhdGEiNgoQQ29sb255R2V0UmVxdWVzdBIQCghDbGllbnRJZBgB",
            "IAEoCRIQCghDb2xvbnlJZBgCIAEoCSo8CgxQbGF0Zm9ybUVudW0SCwoHVW5r",
            "bm93bhAAEgsKB1dpbmRvd3MQARIJCgVMaW51eBACEgcKA01hYxADMsABCg1D",
            "b2xvbnlTZXJ2aWNlEjsKBkNyZWF0ZRIbLmNvbG9ueS5Db2xvbnlDcmVhdGVS",
            "ZXF1ZXN0GhIuY29sb255LkNvbG9ueURhdGEiABI7CgZVcGRhdGUSGy5jb2xv",
            "bnkuQ29sb255VXBkYXRlUmVxdWVzdBoSLmNvbG9ueS5Db2xvbnlEYXRhIgAS",
            "NQoDR2V0EhguY29sb255LkNvbG9ueUdldFJlcXVlc3QaEi5jb2xvbnkuQ29s",
            "b255RGF0YSIAYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Colony.PlatformEnum), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Colony.ColonyData), global::Colony.ColonyData.Parser, new[]{ "ColonyId", "Name", "FactionName", "MapId", "Tick", "UsedDevMode", "GameVersion", "Platform", "CreateDate" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Colony.ColonyCreateRequest), global::Colony.ColonyCreateRequest.Parser, new[]{ "ClientId", "Data" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Colony.ColonyUpdateRequest), global::Colony.ColonyUpdateRequest.Parser, new[]{ "ClientId", "Data" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Colony.ColonyGetRequest), global::Colony.ColonyGetRequest.Parser, new[]{ "ClientId", "ColonyId" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum PlatformEnum {
    [pbr::OriginalName("Unknown")] Unknown = 0,
    [pbr::OriginalName("Windows")] Windows = 1,
    [pbr::OriginalName("Linux")] Linux = 2,
    [pbr::OriginalName("Mac")] Mac = 3,
  }

  #endregion

  #region Messages
  public sealed partial class ColonyData : pb::IMessage<ColonyData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ColonyData> _parser = new pb::MessageParser<ColonyData>(() => new ColonyData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ColonyData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Colony.ColonyReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColonyData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColonyData(ColonyData other) : this() {
      colonyId_ = other.colonyId_;
      name_ = other.name_;
      factionName_ = other.factionName_;
      mapId_ = other.mapId_;
      tick_ = other.tick_;
      usedDevMode_ = other.usedDevMode_;
      gameVersion_ = other.gameVersion_;
      platform_ = other.platform_;
      createDate_ = other.createDate_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColonyData Clone() {
      return new ColonyData(this);
    }

    /// <summary>Field number for the "ColonyId" field.</summary>
    public const int ColonyIdFieldNumber = 1;
    private string colonyId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ColonyId {
      get { return colonyId_; }
      set {
        colonyId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FactionName" field.</summary>
    public const int FactionNameFieldNumber = 3;
    private string factionName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FactionName {
      get { return factionName_; }
      set {
        factionName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MapId" field.</summary>
    public const int MapIdFieldNumber = 9;
    private int mapId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MapId {
      get { return mapId_; }
      set {
        mapId_ = value;
      }
    }

    /// <summary>Field number for the "Tick" field.</summary>
    public const int TickFieldNumber = 4;
    private int tick_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Tick {
      get { return tick_; }
      set {
        tick_ = value;
      }
    }

    /// <summary>Field number for the "UsedDevMode" field.</summary>
    public const int UsedDevModeFieldNumber = 5;
    private bool usedDevMode_;
    /// <summary>
    /// This is a fuse, once blown, it cannot be unset.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UsedDevMode {
      get { return usedDevMode_; }
      set {
        usedDevMode_ = value;
      }
    }

    /// <summary>Field number for the "GameVersion" field.</summary>
    public const int GameVersionFieldNumber = 6;
    private string gameVersion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GameVersion {
      get { return gameVersion_; }
      set {
        gameVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Platform" field.</summary>
    public const int PlatformFieldNumber = 7;
    private global::Colony.PlatformEnum platform_ = global::Colony.PlatformEnum.Unknown;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Colony.PlatformEnum Platform {
      get { return platform_; }
      set {
        platform_ = value;
      }
    }

    /// <summary>Field number for the "CreateDate" field.</summary>
    public const int CreateDateFieldNumber = 8;
    private long createDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CreateDate {
      get { return createDate_; }
      set {
        createDate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ColonyData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ColonyData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ColonyId != other.ColonyId) return false;
      if (Name != other.Name) return false;
      if (FactionName != other.FactionName) return false;
      if (MapId != other.MapId) return false;
      if (Tick != other.Tick) return false;
      if (UsedDevMode != other.UsedDevMode) return false;
      if (GameVersion != other.GameVersion) return false;
      if (Platform != other.Platform) return false;
      if (CreateDate != other.CreateDate) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ColonyId.Length != 0) hash ^= ColonyId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (FactionName.Length != 0) hash ^= FactionName.GetHashCode();
      if (MapId != 0) hash ^= MapId.GetHashCode();
      if (Tick != 0) hash ^= Tick.GetHashCode();
      if (UsedDevMode != false) hash ^= UsedDevMode.GetHashCode();
      if (GameVersion.Length != 0) hash ^= GameVersion.GetHashCode();
      if (Platform != global::Colony.PlatformEnum.Unknown) hash ^= Platform.GetHashCode();
      if (CreateDate != 0L) hash ^= CreateDate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ColonyId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ColonyId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (FactionName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FactionName);
      }
      if (Tick != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Tick);
      }
      if (UsedDevMode != false) {
        output.WriteRawTag(40);
        output.WriteBool(UsedDevMode);
      }
      if (GameVersion.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(GameVersion);
      }
      if (Platform != global::Colony.PlatformEnum.Unknown) {
        output.WriteRawTag(56);
        output.WriteEnum((int) Platform);
      }
      if (CreateDate != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(CreateDate);
      }
      if (MapId != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(MapId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ColonyId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ColonyId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (FactionName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FactionName);
      }
      if (Tick != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Tick);
      }
      if (UsedDevMode != false) {
        output.WriteRawTag(40);
        output.WriteBool(UsedDevMode);
      }
      if (GameVersion.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(GameVersion);
      }
      if (Platform != global::Colony.PlatformEnum.Unknown) {
        output.WriteRawTag(56);
        output.WriteEnum((int) Platform);
      }
      if (CreateDate != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(CreateDate);
      }
      if (MapId != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(MapId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ColonyId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ColonyId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (FactionName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FactionName);
      }
      if (MapId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MapId);
      }
      if (Tick != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tick);
      }
      if (UsedDevMode != false) {
        size += 1 + 1;
      }
      if (GameVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GameVersion);
      }
      if (Platform != global::Colony.PlatformEnum.Unknown) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Platform);
      }
      if (CreateDate != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreateDate);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ColonyData other) {
      if (other == null) {
        return;
      }
      if (other.ColonyId.Length != 0) {
        ColonyId = other.ColonyId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.FactionName.Length != 0) {
        FactionName = other.FactionName;
      }
      if (other.MapId != 0) {
        MapId = other.MapId;
      }
      if (other.Tick != 0) {
        Tick = other.Tick;
      }
      if (other.UsedDevMode != false) {
        UsedDevMode = other.UsedDevMode;
      }
      if (other.GameVersion.Length != 0) {
        GameVersion = other.GameVersion;
      }
      if (other.Platform != global::Colony.PlatformEnum.Unknown) {
        Platform = other.Platform;
      }
      if (other.CreateDate != 0L) {
        CreateDate = other.CreateDate;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ColonyId = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            FactionName = input.ReadString();
            break;
          }
          case 32: {
            Tick = input.ReadInt32();
            break;
          }
          case 40: {
            UsedDevMode = input.ReadBool();
            break;
          }
          case 50: {
            GameVersion = input.ReadString();
            break;
          }
          case 56: {
            Platform = (global::Colony.PlatformEnum) input.ReadEnum();
            break;
          }
          case 64: {
            CreateDate = input.ReadInt64();
            break;
          }
          case 72: {
            MapId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ColonyId = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            FactionName = input.ReadString();
            break;
          }
          case 32: {
            Tick = input.ReadInt32();
            break;
          }
          case 40: {
            UsedDevMode = input.ReadBool();
            break;
          }
          case 50: {
            GameVersion = input.ReadString();
            break;
          }
          case 56: {
            Platform = (global::Colony.PlatformEnum) input.ReadEnum();
            break;
          }
          case 64: {
            CreateDate = input.ReadInt64();
            break;
          }
          case 72: {
            MapId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ColonyCreateRequest : pb::IMessage<ColonyCreateRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ColonyCreateRequest> _parser = new pb::MessageParser<ColonyCreateRequest>(() => new ColonyCreateRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ColonyCreateRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Colony.ColonyReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColonyCreateRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColonyCreateRequest(ColonyCreateRequest other) : this() {
      clientId_ = other.clientId_;
      data_ = other.data_ != null ? other.data_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColonyCreateRequest Clone() {
      return new ColonyCreateRequest(this);
    }

    /// <summary>Field number for the "ClientId" field.</summary>
    public const int ClientIdFieldNumber = 1;
    private string clientId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientId {
      get { return clientId_; }
      set {
        clientId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private global::Colony.ColonyData data_;
    /// <summary>
    /// Certain fields from ColonyData will be ignored
    /// during creation of the colony such as ColonyId and CreateDate.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Colony.ColonyData Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ColonyCreateRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ColonyCreateRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClientId != other.ClientId) return false;
      if (!object.Equals(Data, other.Data)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClientId.Length != 0) hash ^= ClientId.GetHashCode();
      if (data_ != null) hash ^= Data.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ClientId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClientId);
      }
      if (data_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ClientId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClientId);
      }
      if (data_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClientId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientId);
      }
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ColonyCreateRequest other) {
      if (other == null) {
        return;
      }
      if (other.ClientId.Length != 0) {
        ClientId = other.ClientId;
      }
      if (other.data_ != null) {
        if (data_ == null) {
          Data = new global::Colony.ColonyData();
        }
        Data.MergeFrom(other.Data);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClientId = input.ReadString();
            break;
          }
          case 18: {
            if (data_ == null) {
              Data = new global::Colony.ColonyData();
            }
            input.ReadMessage(Data);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ClientId = input.ReadString();
            break;
          }
          case 18: {
            if (data_ == null) {
              Data = new global::Colony.ColonyData();
            }
            input.ReadMessage(Data);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ColonyUpdateRequest : pb::IMessage<ColonyUpdateRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ColonyUpdateRequest> _parser = new pb::MessageParser<ColonyUpdateRequest>(() => new ColonyUpdateRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ColonyUpdateRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Colony.ColonyReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColonyUpdateRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColonyUpdateRequest(ColonyUpdateRequest other) : this() {
      clientId_ = other.clientId_;
      data_ = other.data_ != null ? other.data_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColonyUpdateRequest Clone() {
      return new ColonyUpdateRequest(this);
    }

    /// <summary>Field number for the "ClientId" field.</summary>
    public const int ClientIdFieldNumber = 1;
    private string clientId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientId {
      get { return clientId_; }
      set {
        clientId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Data" field.</summary>
    public const int DataFieldNumber = 2;
    private global::Colony.ColonyData data_;
    /// <summary>
    /// Certain fields from ColonyData will be ignored
    /// during update of the colony such as ColonyId, Platform and CreateDate.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Colony.ColonyData Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ColonyUpdateRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ColonyUpdateRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClientId != other.ClientId) return false;
      if (!object.Equals(Data, other.Data)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClientId.Length != 0) hash ^= ClientId.GetHashCode();
      if (data_ != null) hash ^= Data.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ClientId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClientId);
      }
      if (data_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ClientId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClientId);
      }
      if (data_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClientId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientId);
      }
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ColonyUpdateRequest other) {
      if (other == null) {
        return;
      }
      if (other.ClientId.Length != 0) {
        ClientId = other.ClientId;
      }
      if (other.data_ != null) {
        if (data_ == null) {
          Data = new global::Colony.ColonyData();
        }
        Data.MergeFrom(other.Data);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClientId = input.ReadString();
            break;
          }
          case 18: {
            if (data_ == null) {
              Data = new global::Colony.ColonyData();
            }
            input.ReadMessage(Data);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ClientId = input.ReadString();
            break;
          }
          case 18: {
            if (data_ == null) {
              Data = new global::Colony.ColonyData();
            }
            input.ReadMessage(Data);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ColonyGetRequest : pb::IMessage<ColonyGetRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ColonyGetRequest> _parser = new pb::MessageParser<ColonyGetRequest>(() => new ColonyGetRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ColonyGetRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Colony.ColonyReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColonyGetRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColonyGetRequest(ColonyGetRequest other) : this() {
      clientId_ = other.clientId_;
      colonyId_ = other.colonyId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColonyGetRequest Clone() {
      return new ColonyGetRequest(this);
    }

    /// <summary>Field number for the "ClientId" field.</summary>
    public const int ClientIdFieldNumber = 1;
    private string clientId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientId {
      get { return clientId_; }
      set {
        clientId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ColonyId" field.</summary>
    public const int ColonyIdFieldNumber = 2;
    private string colonyId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ColonyId {
      get { return colonyId_; }
      set {
        colonyId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ColonyGetRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ColonyGetRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClientId != other.ClientId) return false;
      if (ColonyId != other.ColonyId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClientId.Length != 0) hash ^= ClientId.GetHashCode();
      if (ColonyId.Length != 0) hash ^= ColonyId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ClientId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClientId);
      }
      if (ColonyId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ColonyId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ClientId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClientId);
      }
      if (ColonyId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ColonyId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClientId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientId);
      }
      if (ColonyId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ColonyId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ColonyGetRequest other) {
      if (other == null) {
        return;
      }
      if (other.ClientId.Length != 0) {
        ClientId = other.ClientId;
      }
      if (other.ColonyId.Length != 0) {
        ColonyId = other.ColonyId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClientId = input.ReadString();
            break;
          }
          case 18: {
            ColonyId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ClientId = input.ReadString();
            break;
          }
          case 18: {
            ColonyId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
